#!/usr/bin/env python3
"""
ÊîπÂñÑ„É¨„Éù„Éº„ÉàÁîüÊàê„Çπ„ÇØ„É™„Éó„Éà
ÊîπÂñÑÁµêÊûú„ÅÆË©≥Á¥∞„É¨„Éù„Éº„Éà„ÇíÁîüÊàê„Åó„Åæ„Åô„ÄÇ
"""

import os
import sys
import json
import argparse
from pathlib import Path
from typing import Dict, List, Any
import pandas as pd
from datetime import datetime

# „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„Çí„Éë„Çπ„Å´ËøΩÂä†
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from src.config import config
from src.logger import get_logger
from src.improvement_history import improvement_history

logger = get_logger("generate_improvement_reports")

class ImprovementReportGenerator:
    """ÊîπÂñÑ„É¨„Éù„Éº„ÉàÁîüÊàê„ÇØ„É©„Çπ"""
    
    def __init__(self):
        self.config = config.get_backtest_config()
        self.reports_dir = Path("reports")
        self.reports_dir.mkdir(exist_ok=True)
        
    def generate_all_reports(self, 
                              evaluation_results_file: str = "evaluation_results.json",
                              test_results_file: str = "test_results.json"):
        """ÂÖ®„Å¶„ÅÆÊîπÂñÑ„É¨„Éù„Éº„Éà„ÇíÁîüÊàê"""
        
        logger.info("ÊîπÂñÑ„É¨„Éù„Éº„ÉàÁîüÊàêÈñãÂßã")
        
        # Ë©ï‰æ°ÁµêÊûú„ÇíË™≠„ÅøËæº„Åø
        evaluation = self._load_evaluation_results(evaluation_results_file)
        test_results = self._load_test_results(test_results_file)
        
        # ÂêÑÁ®Æ„É¨„Éù„Éº„Éà„ÇíÁîüÊàê
        self._generate_summary_report(evaluation, test_results)
        self._generate_detailed_report(evaluation, test_results)
        self._generate_comparison_report(evaluation, test_results)
        self._generate_timeline_report()
        
        logger.info("ÊîπÂñÑ„É¨„Éù„Éº„ÉàÁîüÊàêÂÆå‰∫Ü")
    
    def _load_evaluation_results(self, evaluation_results_file: str) -> Dict[str, Any]:
        """Ë©ï‰æ°ÁµêÊûú„ÇíË™≠„ÅøËæº„Åø"""
        try:
            if Path(evaluation_results_file).exists():
                with open(evaluation_results_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"Ë©ï‰æ°ÁµêÊûúË™≠„ÅøËæº„Åø„Ç®„É©„Éº: {e}")
        return {}
    
    def _load_test_results(self, test_results_file: str) -> List[Dict[str, Any]]:
        """„ÉÜ„Çπ„ÉàÁµêÊûú„ÇíË™≠„ÅøËæº„Åø"""
        try:
            if Path(test_results_file).exists():
                with open(test_results_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"„ÉÜ„Çπ„ÉàÁµêÊûúË™≠„ÅøËæº„Åø„Ç®„É©„Éº: {e}")
        return []
    
    def _generate_summary_report(self, evaluation: Dict[str, Any], test_results: List[Dict[str, Any]]):
        """„Çµ„Éû„É™„Éº„É¨„Éù„Éº„Éà„ÇíÁîüÊàê"""
        
        # Áµ±Ë®à„Éá„Éº„Çø„ÅÆË®àÁÆó
        total_proposals = len(test_results)
        successful_count = len([r for r in test_results if r.get('status') == 'success'])
        failed_count = total_proposals - successful_count
        success_rate = (successful_count / total_proposals * 100) if total_proposals > 0 else 0
        
        html_content = f"""
        <!DOCTYPE html>
        <html lang="ja">
        <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>AIÊîπÂñÑ„Çµ„Éû„É™„Éº„É¨„Éù„Éº„Éà</title>
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            <style>
                * {{
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }}
                
                body {{
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    color: #333;
                }}
                
                .container {{
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 20px;
                }}
                
                .header {{
                    background: rgba(255, 255, 255, 0.95);
                    backdrop-filter: blur(10px);
                    border-radius: 20px;
                    padding: 30px;
                    margin-bottom: 30px;
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
                    text-align: center;
                }}
                
                .header h1 {{
                    font-size: 2.5em;
                    color: #2c3e50;
                    margin-bottom: 10px;
                    font-weight: 700;
                }}
                
                .header p {{
                    color: #7f8c8d;
                    font-size: 1.1em;
                }}
                
                .stats-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 20px;
                    margin-bottom: 30px;
                }}
                
                .stat-card {{
                    background: rgba(255, 255, 255, 0.95);
                    backdrop-filter: blur(10px);
                    border-radius: 15px;
                    padding: 25px;
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
                    text-align: center;
                    transition: transform 0.3s ease;
                }}
                
                .stat-card:hover {{
                    transform: translateY(-5px);
                }}
                
                .stat-value {{
                    font-size: 2.5em;
                    font-weight: 700;
                    margin-bottom: 10px;
                }}
                
                .stat-label {{
                    color: #7f8c8d;
                    font-size: 0.9em;
                }}
                
                .positive {{ color: #27ae60; }}
                .negative {{ color: #e74c3c; }}
                .neutral {{ color: #3498db; }}
                
                .content-section {{
                    background: rgba(255, 255, 255, 0.95);
                    backdrop-filter: blur(10px);
                    border-radius: 20px;
                    padding: 30px;
                    margin-bottom: 30px;
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
                }}
                
                .section-title {{
                    color: #2c3e50;
                    font-size: 1.5em;
                    margin-bottom: 20px;
                    padding-bottom: 10px;
                    border-bottom: 2px solid #ecf0f1;
                }}
                
                .improvement-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                }}
                
                .improvement-card {{
                    background: #f8f9fa;
                    border-radius: 12px;
                    padding: 20px;
                    border-left: 4px solid #3498db;
                }}
                
                .improvement-card.success {{
                    border-left-color: #27ae60;
                }}
                
                .improvement-card.failed {{
                    border-left-color: #e74c3c;
                }}
                
                .improvement-card h3 {{
                    color: #2c3e50;
                    margin-bottom: 15px;
                    font-size: 1.2em;
                }}
                
                .metric-row {{
                    display: flex;
                    justify-content: space-between;
                    margin-bottom: 8px;
                    padding: 5px 0;
                }}
                
                .metric-label {{
                    color: #7f8c8d;
                    font-size: 0.9em;
                }}
                
                .metric-value {{
                    font-weight: 600;
                    font-size: 0.9em;
                }}
                
                .chart-container {{
                    position: relative;
                    height: 400px;
                    margin: 20px 0;
                }}
                
                .footer {{
                    background: rgba(255, 255, 255, 0.95);
                    backdrop-filter: blur(10px);
                    border-radius: 20px;
                    padding: 20px;
                    text-align: center;
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
                }}
                
                .footer a {{
                    color: #3498db;
                    text-decoration: none;
                    margin: 0 10px;
                }}
                
                .footer a:hover {{
                    text-decoration: underline;
                }}
                
                @media (max-width: 768px) {{
                    .stats-grid {{
                        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                    }}
                    
                    .improvement-grid {{
                        grid-template-columns: 1fr;
                    }}
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>ü§ñ AIÊîπÂñÑ„Çµ„Éû„É™„Éº„É¨„Éù„Éº„Éà</h1>
                    <p>AIÊîπÂñÑ„É´„Éº„Éó„ÅÆÂÆüË°åÁµêÊûú„Å®ÊîπÂñÑÊèêÊ°à„ÅÆË©≥Á¥∞ÂàÜÊûê</p>
                    <p>ÁîüÊàêÊó•ÊôÇ: {datetime.now().strftime('%YÂπ¥%mÊúà%dÊó• %H:%M:%S')}</p>
                </div>
                
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-value neutral">{total_proposals}</div>
                        <div class="stat-label">Á∑èÊîπÂñÑÊèêÊ°àÊï∞</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value positive">{successful_count}</div>
                        <div class="stat-label">ÊàêÂäü„Åó„ÅüÊîπÂñÑ</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value negative">{failed_count}</div>
                        <div class="stat-label">Â§±Êïó„Åó„ÅüÊîπÂñÑ</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value neutral">{success_rate:.1f}%</div>
                        <div class="stat-label">ÊàêÂäüÁéá</div>
                    </div>
                </div>
                
                <div class="content-section">
                    <h2 class="section-title">üìä ÊîπÂñÑÁµêÊûú„ÅÆÂàÜÂ∏É</h2>
                    <div class="chart-container">
                        <canvas id="resultsChart"></canvas>
                    </div>
                </div>
                
                <div class="content-section">
                    <h2 class="section-title">üéØ ÊîπÂñÑÊèêÊ°à„ÅÆË©≥Á¥∞</h2>
                    <div class="improvement-grid">
        """
        
        # ÊîπÂñÑÊèêÊ°à„ÅÆË©≥Á¥∞„Ç´„Éº„Éâ
        for result in test_results:
            strategy_name = result.get('strategy_name', 'Unknown')
            status = result.get('status', 'unknown')
            old_score = result.get('old_score', 0)
            new_score = result.get('new_score', 0)
            improvement = result.get('improvement_score', 0)
            description = result.get('description', 'ÊîπÂñÑÊèêÊ°à')
            
            card_class = 'success' if status == 'success' else 'failed'
            score_color = 'positive' if improvement > 0 else 'negative'
            
            html_content += f"""
                        <div class="improvement-card {card_class}">
                            <h3>{strategy_name}</h3>
                            <div class="metric-row">
                                <span class="metric-label">ÊîπÂñÑÊèêÊ°à</span>
                                <span class="metric-value">{description}</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Êóß„Çπ„Ç≥„Ç¢</span>
                                <span class="metric-value">{old_score:.4f}</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Êñ∞„Çπ„Ç≥„Ç¢</span>
                                <span class="metric-value">{new_score:.4f}</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">ÊîπÂñÑÂ∫¶</span>
                                <span class="metric-value {score_color}">{improvement:+.4f}</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">„Çπ„ÉÜ„Éº„Çø„Çπ</span>
                                <span class="metric-value">{status}</span>
                            </div>
                        </div>
            """
        
        html_content += """
                    </div>
                </div>
                
                <div class="footer">
                    <p>
                        <a href="index.html">‚Üê „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Å´Êàª„Çã</a> |
                        <a href="comparison_report.html">ÊØîËºÉ„É¨„Éù„Éº„Éà</a> |
                        <a href="timeline_report.html">„Çø„Ç§„É†„É©„Ç§„É≥</a>
                    </p>
                </div>
            </div>
            
            <script>
                // ÁµêÊûúÂàÜÂ∏É„ÉÅ„É£„Éº„Éà
                const ctx = document.getElementById('resultsChart').getContext('2d');
                new Chart(ctx, {{
                    type: 'doughnut',
                    data: {{
                        labels: ['ÊàêÂäü', 'Â§±Êïó'],
                        datasets: [{{
                            data: [{successful_count}, {failed_count}],
                            backgroundColor: ['#27ae60', '#e74c3c'],
                            borderWidth: 0
                        }}]
                    }},
                    options: {{
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {{
                            legend: {{
                                position: 'bottom',
                                labels: {{
                                    padding: 20,
                                    usePointStyle: true
                                }}
                            }}
                        }}
                    }}
                }});
            </script>
        </body>
        </html>
        """
        
        # „Éá„Éº„Çø„ÇíÂüã„ÇÅËæº„Åø
        html_content = html_content.replace('{successful_count}', str(successful_count))
        html_content = html_content.replace('{failed_count}', str(failed_count))
        
        # „Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
        output_file = self.reports_dir / "improvement_summary.html"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        logger.info(f"ÊîπÂñÑ„Çµ„Éû„É™„Éº„É¨„Éù„Éº„Éà„ÇíÁîüÊàê: {output_file}")
    
    def _generate_detailed_report(self, evaluation: Dict[str, Any], test_results: List[Dict[str, Any]]):
        """Ë©≥Á¥∞„É¨„Éù„Éº„Éà„ÇíÁîüÊàê"""
        
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>AIÊîπÂñÑË©≥Á¥∞„É¨„Éù„Éº„Éà</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background: #2c3e50; color: white; padding: 20px; border-radius: 5px; }}
                .improvement {{ margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }}
                .success {{ border-left: 5px solid #27ae60; }}
                .failure {{ border-left: 5px solid #e74c3c; }}
                .metrics {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin: 10px 0; }}
                .metric {{ background: #f8f9fa; padding: 10px; border-radius: 3px; }}
                .improved {{ background: #d4edda; }}
                .degraded {{ background: #f8d7da; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>ü§ñ AIÊîπÂñÑË©≥Á¥∞„É¨„Éù„Éº„Éà</h1>
                <p>ÁîüÊàêÊó•ÊôÇ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <h2>ÊàêÂäü„Åó„ÅüÊîπÂñÑ</h2>
            {self._generate_successful_improvements_html(evaluation)}
            
            <h2>Â§±Êïó„Åó„ÅüÊîπÂñÑ</h2>
            {self._generate_failed_improvements_html(evaluation)}
            
            <h2>ÂÖ®„ÉÜ„Çπ„ÉàÁµêÊûú</h2>
            {self._generate_all_test_results_html(test_results)}
        </body>
        </html>
        """
        
        output_file = self.reports_dir / "improvement_detailed.html"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        logger.info(f"Ë©≥Á¥∞„É¨„Éù„Éº„Éà„ÇíÁîüÊàê: {output_file}")
    
    def _generate_comparison_report(self, evaluation: Dict[str, Any], test_results: List[Dict[str, Any]]):
        """ÊØîËºÉ„É¨„Éù„Éº„Éà„ÇíÁîüÊàê"""
        
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>AIÊîπÂñÑÊØîËºÉ„É¨„Éù„Éº„Éà</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background: #2c3e50; color: white; padding: 20px; border-radius: 5px; }}
                .comparison {{ margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }}
                .before-after {{ display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }}
                .before {{ background: #f8f9fa; padding: 15px; border-radius: 5px; }}
                .after {{ background: #e8f5e8; padding: 15px; border-radius: 5px; }}
                .metric {{ margin: 10px 0; }}
                .improvement {{ color: #27ae60; font-weight: bold; }}
                .degradation {{ color: #e74c3c; font-weight: bold; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>ü§ñ AIÊîπÂñÑÊØîËºÉ„É¨„Éù„Éº„Éà</h1>
                <p>ÁîüÊàêÊó•ÊôÇ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            {self._generate_comparison_details_html(evaluation)}
        </body>
        </html>
        """
        
        output_file = self.reports_dir / "improvement_comparison.html"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        logger.info(f"ÊØîËºÉ„É¨„Éù„Éº„Éà„ÇíÁîüÊàê: {output_file}")
    
    def _generate_timeline_report(self):
        """„Çø„Ç§„É†„É©„Ç§„É≥„É¨„Éù„Éº„Éà„ÇíÁîüÊàê"""
        
        summary = improvement_history.get_improvement_summary()
        
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>AIÊîπÂñÑ„Çø„Ç§„É†„É©„Ç§„É≥„É¨„Éù„Éº„Éà</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background: #2c3e50; color: white; padding: 20px; border-radius: 5px; }}
                .timeline {{ margin: 20px 0; }}
                .timeline-item {{ margin: 10px 0; padding: 10px; border-left: 3px solid #3498db; background: #f8f9fa; }}
                .adopted {{ border-left-color: #27ae60; }}
                .failed {{ border-left-color: #e74c3c; }}
                .pending {{ border-left-color: #f39c12; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>ü§ñ AIÊîπÂñÑ„Çø„Ç§„É†„É©„Ç§„É≥„É¨„Éù„Éº„Éà</h1>
                <p>ÁîüÊàêÊó•ÊôÇ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <div class="timeline">
                {self._generate_timeline_items_html()}
            </div>
        </body>
        </html>
        """
        
        output_file = self.reports_dir / "improvement_timeline.html"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        logger.info(f"„Çø„Ç§„É†„É©„Ç§„É≥„É¨„Éù„Éº„Éà„ÇíÁîüÊàê: {output_file}")
    
    def _generate_strategy_summary_html(self, evaluation: Dict[str, Any]) -> str:
        """Êà¶Áï•Âà•„Çµ„Éû„É™„Éº„ÅÆHTMLÁîüÊàê"""
        html = ""
        
        # Êà¶Áï•Âà•„ÅÆÁµ±Ë®à„ÇíÈõÜË®à
        strategy_stats = {}
        for detail in evaluation.get('successful_details', []):
            strategy = detail['strategy_name']
            if strategy not in strategy_stats:
                strategy_stats[strategy] = {'success': 0, 'failure': 0, 'total_score': 0}
            strategy_stats[strategy]['success'] += 1
            strategy_stats[strategy]['total_score'] += detail['improvement_score']
        
        for detail in evaluation.get('failed_details', []):
            strategy = detail['strategy_name']
            if strategy not in strategy_stats:
                strategy_stats[strategy] = {'success': 0, 'failure': 0, 'total_score': 0}
            strategy_stats[strategy]['failure'] += 1
        
        for strategy, stats in strategy_stats.items():
            total = stats['success'] + stats['failure']
            avg_score = stats['total_score'] / stats['success'] if stats['success'] > 0 else 0
            html += f"""
            <div style="margin: 10px 0; padding: 10px; background: white; border-radius: 5px;">
                <h3>{strategy}</h3>
                <p>ÊàêÂäü: {stats['success']} | Â§±Êïó: {stats['failure']} | Âπ≥Âùá„Çπ„Ç≥„Ç¢: {avg_score:.4f}</p>
            </div>
            """
        
        return html
    
    def _generate_recommendations_html(self, evaluation: Dict[str, Any]) -> str:
        """Êé®Â•®‰∫ãÈ†Ö„ÅÆHTMLÁîüÊàê"""
        html = ""
        
        for recommendation in evaluation.get('recommendations', []):
            html += f"<p>‚Ä¢ {recommendation}</p>"
        
        return html
    
    def _generate_history_summary_html(self) -> str:
        """ÊîπÂñÑÂ±•Ê≠¥„Çµ„Éû„É™„Éº„ÅÆHTMLÁîüÊàê"""
        try:
            summary = improvement_history.get_improvement_summary()
            
            html = f"""
            <p>Á∑èÊîπÂñÑÂõûÊï∞: {summary['total']}</p>
            <p>ÂØæË±°Êà¶Áï•Êï∞: {len(summary['strategies'])}</p>
            """
            
            if summary['recent_improvements']:
                html += "<h3>ÊúÄËøë„ÅÆÊîπÂñÑ</h3>"
                for record in summary['recent_improvements'][:5]:
                    status_display = record['status']
                    if record['status'] == 'success':
                        status_display = 'Ê§úË®ºÊàêÂäü'
                    elif record['status'] == 'adopted':
                        status_display = 'Êé°Áî®Ê∏à„Åø'
                    elif record['status'] == 'failed':
                        status_display = 'Â§±Êïó'
                    elif record['status'] == 'pending':
                        status_display = '‰øùÁïô'
                    
                    html += f"<p>‚Ä¢ {record['strategy']} - {status_display} („Çπ„Ç≥„Ç¢: {record['score']:.4f})</p>"
            
            return html
        except Exception as e:
            logger.error(f"Â±•Ê≠¥„Çµ„Éû„É™„ÉºÁîüÊàê„Ç®„É©„Éº: {e}")
            return "<p>Â±•Ê≠¥„Çµ„Éû„É™„Éº„ÅÆÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ</p>"
    
    def _generate_successful_improvements_html(self, evaluation: Dict[str, Any]) -> str:
        """ÊàêÂäü„Åó„ÅüÊîπÂñÑ„ÅÆHTMLÁîüÊàê"""
        html = ""
        
        for detail in evaluation.get('successful_details', []):
            html += f"""
            <div class="improvement success">
                <h3>{detail['strategy_name']}</h3>
                <p><strong>Ë™¨Êòé:</strong> {detail['description']}</p>
                <p><strong>ÊîπÂñÑ„Çπ„Ç≥„Ç¢:</strong> {detail['improvement_score']:.4f}</p>
                <p><strong>ÊîπÂñÑ„É¨„Éô„É´:</strong> {detail['improvement_level']}</p>
                <p><strong>Êé®Â•®:</strong> {detail['recommendation']}</p>
                <p><strong>„É™„Çπ„ÇØË©ï‰æ°:</strong> {detail['risk_assessment']}</p>
                
                <div class="metrics">
                    <div class="metric improved">
                        <strong>ÊîπÂñÑ„É°„Éà„É™„ÇØ„Çπ:</strong><br>
                        {', '.join(detail['improved_metrics']) if detail['improved_metrics'] else '„Å™„Åó'}
                    </div>
                    <div class="metric degraded">
                        <strong>ÊÇ™Âåñ„É°„Éà„É™„ÇØ„Çπ:</strong><br>
                        {', '.join(detail['degraded_metrics']) if detail['degraded_metrics'] else '„Å™„Åó'}
                    </div>
                </div>
            </div>
            """
        
        return html
    
    def _generate_failed_improvements_html(self, evaluation: Dict[str, Any]) -> str:
        """Â§±Êïó„Åó„ÅüÊîπÂñÑ„ÅÆHTMLÁîüÊàê"""
        html = ""
        
        for detail in evaluation.get('failed_details', []):
            html += f"""
            <div class="improvement failure">
                <h3>{detail['strategy_name']}</h3>
                <p><strong>Ë™¨Êòé:</strong> {detail['description']}</p>
                <p><strong>ÊîπÂñÑ„Çπ„Ç≥„Ç¢:</strong> {detail['improvement_score']:.4f}</p>
                <p><strong>ÊîπÂñÑ„É¨„Éô„É´:</strong> {detail['improvement_level']}</p>
                <p><strong>Êé®Â•®:</strong> {detail['recommendation']}</p>
            </div>
            """
        
        return html
    
    def _generate_all_test_results_html(self, test_results: List[Dict[str, Any]]) -> str:
        """ÂÖ®„ÉÜ„Çπ„ÉàÁµêÊûú„ÅÆHTMLÁîüÊàê"""
        html = ""
        
        for i, result in enumerate(test_results, 1):
            proposal = result.get('proposal', {})
            success = result.get('success', False)
            status_class = 'success' if success else 'failure'
            
            html += f"""
            <div class="improvement {status_class}">
                <h4>„ÉÜ„Çπ„Éà {i}: {proposal.get('strategy_name', '')}</h4>
                <p><strong>Ë™¨Êòé:</strong> {proposal.get('description', '')}</p>
                <p><strong>ÊàêÂäü:</strong> {'„ÅØ„ÅÑ' if success else '„ÅÑ„ÅÑ„Åà'}</p>
                <p><strong>ÊîπÂñÑ„Çπ„Ç≥„Ç¢:</strong> {result.get('improvement_score', 0):.4f}</p>
            </div>
            """
        
        return html
    
    def _generate_comparison_details_html(self, evaluation: Dict[str, Any]) -> str:
        """ÊØîËºÉË©≥Á¥∞„ÅÆHTMLÁîüÊàê"""
        html = ""
        
        for detail in evaluation.get('successful_details', []):
            html += f"""
            <div class="comparison">
                <h3>{detail['strategy_name']}</h3>
                <div class="before-after">
                    <div class="before">
                        <h4>ÊîπÂñÑÂâç</h4>
                        <p>„Éë„É©„É°„Éº„Çø: {detail.get('old_params', 'N/A')}</p>
                    </div>
                    <div class="after">
                        <h4>ÊîπÂñÑÂæå</h4>
                        <p>„Éë„É©„É°„Éº„Çø: {detail.get('new_params', 'N/A')}</p>
                        <p class="improvement">ÊîπÂñÑ„Çπ„Ç≥„Ç¢: {detail['improvement_score']:.4f}</p>
                    </div>
                </div>
            </div>
            """
        
        return html
    
    def _generate_timeline_items_html(self) -> str:
        """„Çø„Ç§„É†„É©„Ç§„É≥„Ç¢„Ç§„ÉÜ„É†„ÅÆHTMLÁîüÊàê"""
        html = ""
        
        # ÊîπÂñÑÂ±•Ê≠¥„ÇíÊôÇÁ≥ªÂàóÈ†Ü„Å´„ÇΩ„Éº„Éà
        history = improvement_history.history
        sorted_history = sorted(history, key=lambda x: x.timestamp, reverse=True)
        
        for record in sorted_history[:20]:  # ÊúÄÊñ∞20‰ª∂
            status_class = record.status
            html += f"""
            <div class="timeline-item {status_class}">
                <h4>{record.strategy_name} - {record.id}</h4>
                <p><strong>Êó•ÊôÇ:</strong> {record.timestamp}</p>
                <p><strong>„Çπ„ÉÜ„Éº„Çø„Çπ:</strong> {record.status}</p>
                <p><strong>Ë™¨Êòé:</strong> {record.description}</p>
                <p><strong>„Çπ„Ç≥„Ç¢:</strong> {record.improvement_score:.4f}</p>
            </div>
            """
        
        return html

def main():
    parser = argparse.ArgumentParser(description='ÊîπÂñÑ„É¨„Éù„Éº„ÉàÁîüÊàê')
    parser.add_argument('--evaluation-results', type=str, default='evaluation_results.json',
                        help='Ë©ï‰æ°ÁµêÊûú„Éï„Ç°„Ç§„É´Âêç')
    parser.add_argument('--test-results', type=str, default='test_results.json',
                        help='„ÉÜ„Çπ„ÉàÁµêÊûú„Éï„Ç°„Ç§„É´Âêç')
    
    args = parser.parse_args()
    
    try:
        generator = ImprovementReportGenerator()
        generator.generate_all_reports(
            evaluation_results_file=args.evaluation_results,
            test_results_file=args.test_results
        )
        logger.info("ÊîπÂñÑ„É¨„Éù„Éº„ÉàÁîüÊàêÂÆå‰∫Ü")
        
    except Exception as e:
        logger.error(f"ÊîπÂñÑ„É¨„Éù„Éº„ÉàÁîüÊàê„Ç®„É©„Éº: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
